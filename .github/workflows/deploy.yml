name: Build and Push HTML App with Argo CD

on:
  push:
    branches: [master]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Extract short SHA
        id: vars
        run: echo "TAG=$(date +%Y%m%d)-${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: tranhoangthaidevops/html-app:${{ env.TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify Docker image
        run: |
          set -e
          docker pull tranhoangthaidevops/html-app:${{ env.TAG }} || { echo "Failed to pull image"; exit 1; }

      - name: Update deployment.yaml with new tag
        run: |
          set -e
          if [ ! -f k8s/deployment.yaml ]; then
            echo "Error: k8s/deployment.yaml not found"
            exit 1
          fi
          sed -i "s|\(image: tranhoangthaidevops/html-app:\).*|\1${{ env.TAG }}|" k8s/deployment.yaml
          echo "Updated deployment.yaml:"
          cat k8s/deployment.yaml

      - name: Push changes back to repo
        run: |
          set -e
          git config user.name "GitHub Actions"
          git config user.email "github-actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/code88-oss/sample-k8s-app.git
          git add .
          git commit -m "Update image tag to ${{ env.TAG }} [skip ci]"
          git push

      - name: Deploy to Minikube with Argo CD
        run: |
          set -e
          # Install Minikube
          echo "Installing Minikube..."
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo mv minikube-linux-amd64 /usr/local/bin/minikube
          sudo chmod +x /usr/local/bin/minikube
          minikube version
          # Install kubectl
          echo "Installing kubectl..."
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo mv kubectl /usr/local/bin/
          sudo chmod +x /usr/local/bin/kubectl
          kubectl version --client
          # Install ngrok
          echo "Installing ngrok..."
          curl -LO https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz || { echo "Failed to download ngrok"; exit 1; }
          tar -xzf ngrok-v3-stable-linux-amd64.tgz || { echo "Failed to extract ngrok"; exit 1; }
          chmod +x ./ngrok
          ./ngrok --version || { echo "ngrok binary not executable"; exit 1; }
          # Check Docker status
          echo "Checking Docker status..."
          docker info || { echo "Docker is not running"; exit 1; }
          # Start Minikube with retries
          echo "Starting Minikube..."
          for attempt in {1..3}; do
            echo "Attempt $attempt of 3..."
            minikube start --driver=docker --cpus=6 --memory=8000mb --force && break
            echo "Minikube start failed, retrying in 10 seconds..."
            sleep 10
            if [ $attempt -eq 3 ]; then
              echo "Minikube failed to start after 3 attempts"
              minikube logs
              exit 1
            fi
          done
          minikube status || { echo "Minikube status check failed"; minikube logs; exit 1; }
          kubectl config use-context minikube
          # Clean up existing resources
          echo "Cleaning up existing resources..."
          kubectl delete service web -n default --ignore-not-found
          kubectl delete deployment web -n default --ignore-not-found
          kubectl delete configmap web-html -n default --ignore-not-found
          # Install Argo CD (namespace-scoped)
          echo "Installing Argo CD..."
          kubectl create namespace argocd || true
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/namespace-install.yaml
          echo "Waiting for Argo CD pods to be ready..."
          for attempt in {1..3}; do
            echo "Attempt $attempt of 3..."
            kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=argocd-server -n argocd --timeout=600s && break
            echo "Argo CD pods not ready, checking pod status..."
            kubectl get pods -n argocd
            kubectl describe pod -n argocd -l app.kubernetes.io/name=argocd-application-controller || true
            echo "Retrying in 30 seconds..."
            sleep 30
            if [ $attempt -eq 3 ]; then
              echo "Argo CD pods failed to become ready after 3 attempts"
              exit 1
            fi
          done
          # Apply Argo CD Application
          echo "Applying Argo CD Application..."
          kubectl apply -f k8s/argocd-app.yaml || { echo "Failed to apply Argo CD Application"; exit 1; }
          # Wait for Argo CD to sync
          echo "Waiting for Argo CD to sync application..."
          for i in {1..90}; do
            SYNC_STATUS=$(kubectl get application web-app -n argocd -o jsonpath='{.status.sync.status}' || echo "NotFound")
            HEALTH_STATUS=$(kubectl get application web-app -n argocd -o jsonpath='{.status.health.status}' || echo "NotFound")
            echo "Sync Status: $SYNC_STATUS, Health Status: $HEALTH_STATUS"
            if [ "$SYNC_STATUS" = "Synced" ] && [ "$HEALTH_STATUS" = "Healthy" ]; then
              echo "Application synced successfully"
              break
            fi
            sleep 10
            if [ $i -eq 90 ]; then
              echo "Argo CD failed to sync application"
              kubectl describe application web-app -n argocd
              exit 1
            fi
          done
          # Verify resources
          echo "Listing pods..."
          kubectl get pods -n default -o wide
          echo "Listing services..."
          kubectl get services -n default -o wide
          echo "Checking pod logs..."
          kubectl logs -l app=web -n default || true
          # Start ngrok tunnel with retries
          echo "Starting ngrok tunnel..."
          ./ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }} || { echo "Failed to configure ngrok"; exit 1; }
          SERVICE_PORT=$(kubectl get service web -n default -o jsonpath='{.spec.ports[0].nodePort}')
          MINIKUBE_IP=$(minikube ip)
          echo "Tunneling http://$MINIKUBE_IP:$SERVICE_PORT..."
          for attempt in {1..3}; do
            echo "ngrok attempt $attempt of 3..."
            ./ngrok http http://$MINIKUBE_IP:$SERVICE_PORT --log=ngrok.log &
            NGROK_PID=$!
            sleep 10
            NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
            if [ -n "$NGROK_URL" ]; then
              echo "ngrok tunnel started successfully"
              break
            fi
            echo "Failed to get ngrok URL, retrying in 10 seconds..."
            kill $NGROK_PID || true
            sleep 10
            if [ $attempt -eq 3 ]; then
              echo "Failed to start ngrok tunnel after 3 attempts"
              cat ngrok.log
              exit 1
            fi
          done
          echo "Public URL: $NGROK_URL"
          # Test the public URL
          echo "Testing web application..."
          for i in {1..3}; do
            echo "Attempt $i:"
            curl -s --max-time 10 "$NGROK_URL" -w "\nHTTP Status: %{http_code}\n" && break
            echo "Attempt $i failed, retrying..."
            sleep 5
            if [ $i -eq 3 ]; then
              echo "Failed to access web after 3 attempts"
              cat ngrok.log
              exit 1
            fi
          done
          # Keep tunnel alive for testing
          echo "============================================================="
          echo "IMPORTANT: Access the public URL now in your browser: $NGROK_URL"
          echo "The URL will be available for the next 5 minutes."
          echo "============================================================="
          sleep 300
          # Clean up ngrok
          echo "Cleaning up ngrok process..."
          kill $NGROK_PID || true

      - name: Clean up
        if: always()
        run: |
          minikube stop || true
          rm -rf /usr/local/bin/minikube /usr/local/bin/kubectl ./ngrok ngrok.log ngrok-v3-stable-linux-amd64.tgz || true
