name: Build and Push HTML App

on:
  push:
    branches: [master]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Extract short SHA
        id: vars
        run: echo "TAG=$(date +%Y%m%d)-${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: tranhoangthaidevops/html-app:${{ env.TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update deployment.yaml with new tag
        run: |
          set -e
          if [ ! -f k8s/deployment.yaml ]; then
            echo "Error: k8s/deployment.yaml not found"
            exit 1
          fi
          sed -i "s|\(image: tranhoangthaidevops/html-app:\).*|\1${{ env.TAG }}|" k8s/deployment.yaml

      - name: Push changes back to repo
        run: |
          set -e
          git config user.name "GitHub Actions"
          git config user.email "github-actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/code88-oss/sample-k8s-app.git
          git add .
          git commit -m "Update image tag to ${{ env.TAG }} [skip ci]"
          git push

      - name: Deploy to Minikube
        run: |
          set -e
          # Install Minikube
          echo "Installing Minikube..."
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo mv minikube-linux-amd64 /usr/local/bin/minikube
          sudo chmod +x /usr/local/bin/minikube
          minikube version
          # Install kubectl
          echo "Installing kubectl..."
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo mv kubectl /usr/local/bin/
          sudo chmod +x /usr/local/bin/kubectl
          kubectl version --client
          # Install ngrok
          echo "Installing ngrok..."
          curl -LO https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz || { echo "Failed to download ngrok"; exit 1; }
          ls -l ngrok-v3-stable-linux-amd64.tgz
          tar -xzf ngrok-v3-stable-linux-amd64.tgz || { echo "Failed to extract ngrok"; exit 1; }
          ls -l ngrok
          chmod +x ./ngrok
          ./ngrok --version || { echo "ngrok binary not executable"; exit 1; }
          # Check Docker status
          echo "Checking Docker status..."
          docker info || { echo "Docker is not running"; exit 1; }
          # Debug system resources
          echo "System resources:"
          free -m
          df -h
          # Start Minikube with retries
          echo "Starting Minikube..."
          for attempt in {1..3}; do
            echo "Attempt $attempt of 3..."
            minikube start --driver=docker --cpus=2 --memory=4000mb --force && break
            echo "Minikube start failed, retrying in 10 seconds..."
            sleep 10
            if [ $attempt -eq 3 ]; then
              echo "Minikube failed to start after 3 attempts"
              minikube logs
              exit 1
            fi
          done
          minikube status || { echo "Minikube status check failed"; minikube logs; exit 1; }
          kubectl config use-context minikube
          # Apply Kubernetes resources
          echo "Applying ConfigMap..."
          kubectl apply -f k8s/configmap.yaml || { echo "Failed to apply ConfigMap"; exit 1; }
          echo "Checking ConfigMap content..."
          kubectl get configmap web-html -n default -o yaml || true
          kubectl apply -f k8s/deployment.yaml || { echo "Failed to apply Deployment"; exit 1; }
          kubectl apply -f k8s/service.yaml || { echo "Failed to apply Service"; exit 1; }
          # Verify resources
          echo "Listing pods..."
          kubectl get pods -n default -o wide
          echo "Listing services..."
          kubectl get services -n default -o wide
          echo "Describing pods for deployment 'web'..."
          kubectl describe pod -l app=web -n default || { echo "No pods found with label app=web"; kubectl get pods -n default -o yaml; }
          echo "Checking pod logs..."
          kubectl logs -l app=web -n default || true
          kubectl rollout status deployment/web -n default --timeout=300s || { echo "Rollout failed"; kubectl describe deployment/web -n default; exit 1; }
          # Start ngrok tunnel
          echo "Starting ngrok tunnel..."
          ./ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }} || { echo "Failed to configure ngrok"; exit 1; }
          SERVICE_PORT=$(kubectl get service web -n default -o jsonpath='{.spec.ports[0].nodePort}')
          MINIKUBE_IP=$(minikube ip)
          echo "Tunneling http://$MINIKUBE_IP:$SERVICE_PORT..."
          ./ngrok http http://$MINIKUBE_IP:$SERVICE_PORT --log=ngrok.log &
          sleep 10
          # Get ngrok public URL
          NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
          if [ -z "$NGROK_URL" ]; then
            echo "Failed to get ngrok URL"
            cat ngrok.log
            exit 1
          fi
          echo "Public URL: $NGROK_URL"
          # Test the public URL
          echo "Testing web application..."
          for i in {1..3}; do
            echo "Attempt $i:"
            curl -s --max-time 10 "$NGROK_URL" -w "\nHTTP Status: %{http_code}\n" && exit 0
            echo "Attempt $i failed, retrying..."
            sleep 5
          done
          echo "Failed to access web after 3 attempts"
          cat ngrok.log
          exit 1

      - name: Clean up
        if: always()
        run: |
          minikube stop || true
          rm -rf /usr/local/bin/minikube /usr/local/bin/kubectl || true
